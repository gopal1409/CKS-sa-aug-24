##we will create two secret and pass them using 
environment varaibles and pass them using mountFS
 12  kubectl create secret -h
   13  kubectl create secret generic -h
##we will create two secret
   14  kubectl create secret generic secret1 --from-literal user=admin
   15  kubectl create secret generic secret2 --from-literal password=12345678
   16  kubectl create pod --image=nginx =o yaml --dry-run=client > pod.yml
 #3now wee are create a pod to attach the secret
   19  kubectl run pod --image=nginx -o yaml --dry-run=client > pod.yml
   20  cat pod.yml
##how to do the same we do not know
https://kubernetes.io/search/?q=secret
#######################################
now create a pod attach the secret using the above mentioned k8s documentation
 19  kubectl run pod --image=nginx -o yaml --dry-run=client > pod.yml
   20  cat pod.yml
  28  kubectl -f pod.yml create
###verify thye secret by login inside the pod
root@cks-master:~# kubectl exec pod -- env | grep pass
password=12345678
##lets hack the mounted secret 
root@cks-master:~# kubectl exec pod -- mount | grep secret1
tmpfs on /etc/secret1 type tmpfs (ro,relatime,size=6943996k,inode64)
##this is will show the secret path 
root@cks-master:~# kubectl exec pod -- find /etc/secret1
/etc/secret1
/etc/secret1/user
/etc/secret1/..data
/etc/secret1/..2024_09_02_04_32_56.255966042
/etc/secret1/..2024_09_02_04_32_56.255966042/user
######check the secret path will show me what is the secret stored in mountfs
root@cks-master:~# kubectl exec pod -- cat /etc/secret1/user
adminroot@cks-master:~# 
###pod to manage secret
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: pod
  name: pod
spec:
  containers:
  - image: nginx
    name: pod
    resources: {}
    env:
    - name: password
      valueFrom:
        secretKeyRef:
          name: secret2
          key: password
    volumeMounts:
        # name must match the volume name below
        - name: secret1
          mountPath: /etc/secret1
          readOnly: true
  volumes:
    - name: secret1
      secret:
        secretName: secret1
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
