#####how to use kubesec
  ##we will create pod and scan your pod yaml file 
  root@cks-master:~/test# kubectl run nginx --image=nginx -o yaml --dry-run=client > pod.yml
root@cks-master:~/test# cat pod.yml
###once we created the pod.yml file which need to be scanner
  462  kubectl run nginx --image=nginx -o yaml --dry-run=client > pod.yml
  463  cat pod.yml
  464  docker run -i kubesec/kubesec:512c5e0 scan /dev/stdin < pod.yml
#####################################################
    ##this will show all the advices against your yaml file
    vi pod.yml 
    ##################################add one of the advice run the pod as non root user
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
    securityContext:
      runAsNonRoot: true
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
####check the advice is fone or not
    464  docker run -i kubesec/kubesec:512c5e0 scan /dev/stdin < pod.yml

##you can put the same rego policy in opa
package main

deny[msg] {
	input.kind = "Deployment"

	# The `some` keyword declares local variables. This rule declares a variable
	# called `container`, with the value any of the input request's spec's container
	# objects. It then checks if the container object's `"image"` field does not
	# start with "hooli.com/".
	not input.spec.template.spec.securityContext.runAsNonRoot = true
	msg := sprintf("container must not run as root user")
}

