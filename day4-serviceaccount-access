##lets create a service account and verify the same using jwt.io
   437  kubectl get sa
  438  kubectl create sa accessor
  439  kubectl get sa
  440  kubectl create token accessor
  ##copy the token and paste it in this site
  https://jwt.io/
  ####you will get cluster information plus the name of the service account plus it apply to which namespace
lets create a pod and use the same using service account which we created earlier
root@docker:~# kubectl run accessor --image=nginx -o yaml --dry-run=client > pod.yml
root@docker:~# cat pod.yml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: accessor
  name: accessor
spec:
  containers:
  - image: nginx
    name: accessor
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
#####add this line so that the pod will be deployed with a service account 
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: accessor
  name: accessor
spec:
  serviceAccountName: test
  containers:
  - image: nginx
    name: accessor
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
root@docker:~# kubectl -f pod.yml create
Error from server (Forbidden): error when creating "pod.yml": pods "accessor" is forbidden: error looking up service account default/test: serviceaccount "test" not found
##########added the servicew account which we created earlier 
vi pod.yml
##########################################
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: accessor
  name: accessor
spec:
  serviceAccountName: accessor
  containers:
  - image: nginx
    name: accessor
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
###apply it
root@docker:~# kubectl -f pod.yml create
##########################################
login inside the pod anc check that we can access the service account or not 
kubectl exec -it accessor -- bash
mount | grep ser
cd  /run/secrets/kubernetes.io/serviceaccount
root@accessor:/run/secrets/kubernetes.io/serviceaccount# ls
ca.crt  namespace  token
#############################
 cat namespace
cat token
####
 env | grep KUBER

 curl https://10.96.0.1 -k
##through a curl request we can get the service account information from inside the pod 
curl https://10.96.0.1 -k -H "Authorization: Bearer $(cat token)"
##finally exit the pod 
exit
###we will mount the service but token will be mounted but not accessable as the token is specific to a namespace
##vi pod.yml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: accessor
  name: accessor
spec:
  automountServiceAccountToken: false ##add this line 
  serviceAccountName: accessor
  containers:
  - image: nginx
    name: accessor
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
######delete teh pod and re create it

root@docker:~# kubectl -f pod.yml replace --force
pod "accessor" deleted
pod/accessor replaced
####
root@docker:~# kubectl exec -it accessor -- bash
##now check the service account is visable or not
root@accessor:/# mount | grep ser
root@accessor:/# mount
#########################
root@docker:~# kubectl edit pod accessor
##because of automountServiceAccountToken: false it will not show the service account
#####
##vi pod.yml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: accessor
  name: accessor
spec:
  automountServiceAccountToken: true #make it true and reapply
  serviceAccountName: accessor
  containers:
  - image: nginx
    name: accessor
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
