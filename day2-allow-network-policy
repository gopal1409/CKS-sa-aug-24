##we will first create an egress routing so that frontend can initiate connection to backend
   109  vi frontend.yml
#####################################
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend
  namespace: default
spec:
  podSelector:
    matchLabels:
      run: frontend
  policyTypes:

  - Egress
  egress:
  - to:


    - podSelector:
        matchLabels:
          run: backend
#########################################
 110  kubectl apply -f frontend.yml
  111  kubectl get networkpolicy
  112  kubectl describe networkpolicy frontend
            ###now also the communciation will not work becuase we have created egress routing from frontend to backend
            #3next we will create an incoming routing from backend to frontend
  113  kubectl exec frontend -- curl backend
##lets created the backend incoming routing from frontend
 118  kubectl get pod --show-labels -o wide

  119  vi backend.yml
##################################
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend
  namespace: default
spec:
  podSelector:
    matchLabels:
      run: backend
  policyTypes:
  
  - Ingress 
  ingress:
  - from:
    
    
    - podSelector:
        matchLabels:
          run: frontend
   ######applyit then check 
  120  kubectl apply -f backend.yml
  121  kubectl get networkpolicy
 113  kubectl exec frontend -- curl backend

###through the ip address it will work put the ip of the backend pod
root@docker:~# kubectl get pod --show-labels -o wide
NAME       READY   STATUS    RESTARTS      AGE   IP            NODE     NOMINATED NODE   READINESS GATES   LABELS
backend    1/1     Running   1 (54m ago)   21h   192.168.1.3   worker   <none>           <none>            run=backend
#######################
vi deny.yml
#####here we will enable port 53 dns port for resulution
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
  namespace: default #all this policy will be specific to a namespace
spec:
  podSelector:
    matchLabels: {}
  policyTypes:
  - Ingress
  - Egress
  egress:
  -  to: 
     ports:
       - port: 53
         protocol: TCP 
       - port: 53 
         protocol: UDP
      ###########################
133  kubectl apply -f deny.yml
  134  kubectl exec frontend -- curl backend
frontend   1/1     Running   1 (54m ago)   21h   192.168.1.2   worker   <none>           <none>            run=frontend
root@docker:~# kubectl exec frontend -- curl 192.168.1.3
<!DOCTYPE html>

##delete all the network policy
 155  kubectl get networkpolicy
  156  kubectl delete networkpolicy default-deny
  157  kubectl delete networkpolicy backend
  158  kubectl delete networkpolicy frontend
