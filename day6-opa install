##we will install opa and integrate the same in kubernetes api yaml file
  341  kubectl create -f https://raw.githubusercontent.com/killer-sh/cks-course-environment/master/course-content/opa/gatekeeper.yaml
  342  kubectl get ns
  343  kubectl -n gatekeeper-system get pod,svc
  ##lets create the admission controller
##first lets create a crd template
  355  vi template.yml
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8salwaysdeny
spec:
  crd:
    spec:
      names:
        kind: K8sAlwaysDeny
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            message:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8salwaysdeny
        violation[{"msg": msg}] {
          1 > 0
          msg := input.parameters.message
        }
###apply the template and check the same
 356  kubectl apply -f template.yml
  357  kubectl get constrainttemplates
#####################
##lets create the template
  358  vi k8salwaysdeny.yml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sAlwaysDeny
metadata:
  name: pod-always-deny
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
  parameters:
    message: "access denied hola many"]
##finally we need to verify the opa applied or not
  359  kubectl apply -f k8salwaysdeny.yml
#####
