###lets create two pod and see that they are communicating with each other
  ##we will create two pod 
    56  kubectl run frontend --image=nginx
   57  kubectl run backend --image=nginx
   58  kubectl get pod
  ##expose both the pod 
   59  kubectl expose pod frontend --port=80
   60  kubectl expose pod backend --port=80
   61  kubectl get svc
  ##this will show that the svc is mapped to your pod you can see the endpoint
   62  kubectl get pod -o wide
   63  kubectl describe svc frontend
   64  kubectl get pod,svc
   ##if we do curl request they can communicate with each other in the default namespace
   66  kubectl exec frontend -- curl backend
   67  kubectl exec backend -- curl frontend
https://kubernetes.io/docs/concepts/services-networking/network-policies/
###lets create an deny policy
vi deny.yml
####################################################
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
  namespace: default #all this policy will be specific to a namespace
spec:
  podSelector:
    matchLabels: {}
  policyTypes:
  - Ingress
  - Egress
#####save the file and apply it
74  kubectl describe networkpolicy default-deny
##now fronternd to backe and vice versa will stop working 
   75  kubectl exec backend -- curl frontend
   76  kubectl exec frontend -- curl backend
